# -*- coding: utf-8 -*-
"""Betweenness _Centrality.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A4jV3fTPcf9FWSrqoswgN2lfWIGRPUSx

# Betweenness Centrality

## shelly Fainberg 208469429
## Noy Elbaz 315073122
"""

import networkx as nx
from collections import defaultdict
import pdb

def betweenness_centrality(G):
      Sigma = defaultdict(dict) ##sigma
      listOfNodes = list(G.nodes())##set list of nodes
      shortedPath = defaultdict(dict)  
      betweenesValue = dict.fromkeys(G,0.0)
      
      #Set Sigma To Zero
      initSigma(listOfNodes,Sigma)
      #Find The Shorted Path 
      shortedPath = findShortedPath(listOfNodes)
      #sigma 
      getSigma(listOfNodes,Sigma)
      n = len(listOfNodes)
      #Calculate Betweenes Value 
      for s in listOfNodes:
          temp = 0
          for i, Vi in enumerate(listOfNodes[:-1]):
              for Vj in listOfNodes[i+1:]:
                  for path in shortedPath[Vi][Vj]:
                      if s in path[1:-1]:
                          temp += 1
                          #Normalize Betweenes Value 
                  betweenesValue[s] += (temp/Sigma[Vi][Vj]/((n-1)*(n-2)/2)) 
                  temp = 0
      return betweenesValue

def findShortedPath(listOfNodes):
     shortedPath = defaultdict(dict) 
     for i, r in enumerate(listOfNodes[:-1]):
        for c in listOfNodes[i+1:]:
            shortedPath[r][c] = [path  for path in nx.all_shortest_paths(G, r, c)]
     return shortedPath;  

def initSigma(listOfNodes,Sigma):
     for r in listOfNodes:
        for c in listOfNodes:
            Sigma[r][c] = 0

def getSigma(listOfNodes,Sigma):
       for r in listOfNodes:
        for c in listOfNodes:
              Sigma[r][c] += len([path for path in nx.all_shortest_paths(G, r, c)])

#Creat Graph
G=nx.Graph()
G.add_edge('A', 'B')
G.add_edge('B', 'C')
G.add_edge('C', 'D')
G.add_edge('C', 'E')
G.add_edge('D', 'F')
G.add_edge('D', 'E') 
G.add_edge('E', 'F')
betweenesValue = betweenness_centrality(G)
print(betweenesValue) #Print Result